using System.Runtime.Serialization;
using System.Text.Json.Serialization;

namespace Shared;

// Not named TileModel because it's the only model without a StateComponent backing it, primarily due to performance reasons
// (there can be 10K, 100K or even millions of tiles in a tileset!)
// This is not a record for performance reasons, otherwise everytime we read this results in lots of copying and we read millions of times in tight loops
// Instead, whoever needs to deep clone this (it won't be in tight loops), will do it manually with binary serializer and that's why [DataMember] is used
[DataContract]
public class Tile
{
    public const int TransparentTileId = 0;

    [DataMember]
    public int id;

    // Stores tile pixel colors in a compact string format. Not used by engine, instead imageFileName and imageTopLeftPos are used
    [DataMember]
    public string hash = "";

    [DataMember]
    public TileHitboxMode hitboxMode;

    [DataMember]
    public string? tags;

    // Not used by engine, just an editor abstraction to have tiles drawn in a z-layer above while avoiding explicit layer usage in editor
    // If set to a tile id, that tile will automatically be placed in the layer above this tile upon export
    [DataMember]
    public int? tileAboveId;

    // Not used by engine, just an editor abstraction to have tiles drawn in a z-layer above while avoiding explicit layer usage in editor
    // If set to true, the tile will be cloned to the layer above upon export
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
    [DataMember] public bool tileAboveIdIsSame;

    // Not used by engine, just an editor abstraction to have tiles drawn in a z-layer above while avoiding explicit layer usage in editor
    // If set to a color, then on export, all colors not equal to the mask color will be cloned to the layer above as a new tile generated by the export process
    [DataMember]
    public string? zIndexMaskColor; // i.e. "00FF00"

    // Data fields for engine use only (exporter populates these)
    public string? imageFileName;
    public MyPoint? imageTopLeftPos;

    // Only used by editor for draw performance caching
    [DataMember]
    [JsonIgnore]
    public byte[]? encodedBytes;

    // To determine uniqueness in scripts that try to merge tiles with same contents
    public record ContentHash(string hash, TileHitboxMode hitboxMode, string tags, int? tileAboveId, bool tileAboveIdIsSame, string zIndexMaskColor);
    public ContentHash GetContentHash() => new ContentHash(hash, hitboxMode, tags ?? "", tileAboveId, tileAboveIdIsSame, zIndexMaskColor ?? "");

    public bool ContainsTag(string tag)
    {
        string[] tagArr = tags?.Split(',') ?? [];
        if (tag.StartsWith("*") && tag.EndsWith("*"))
        {
            tag = tag.Substring(1, tag.Length - 2);
            foreach (string t in tagArr)
            {
                if (t.Contains(tag))
                {
                    return true;
                }
            }
            return false;
        }
        else if (tag.StartsWith("*"))
        {
            tag = tag.Substring(1);
            foreach (string t in tagArr)
            {
                if (t.EndsWith(tag))
                {
                    return true;
                }
            }
            return false;
        }
        else if (tag.EndsWith("*"))
        {
            tag = tag.Substring(0, tag.Length - 1);
            foreach (string t in tagArr)
            {
                if (t.StartsWith(tag))
                {
                    return true;
                }
            }
            return false;
        }
        return tagArr.Contains(tag);
    }
}